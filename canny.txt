1. First,I didn't understand why we only need to submit 1 cpp file when there are at least 3 modules to implement. Because in assignment 3, there are three header files and cpp files, separating the modules for better readability and debugging. But then I realized it is possible to implement all the modules in one cpp file for the simplicity of implementation in canny edge detection algorithm.
2. At first, I didn't know how to use systemc to integrate the canny edge detection algorithm. I thought I need to put a lot of code in the main function, but it turns out I can just put all the funcitons in the process function in DUT module.
3. I didn't know how to not contain any global functions neither any global variables because we still need to use read_pgm_image and write_pgm_image. So my first attempt is to put them in the stimulus module, but then I realized that platform and monitor module also need to use them. So I ended up creating a new class Image_IO to store the functions for reusability.
4. I thought my systemC model will run faster than pure C code because I can parallelize some image IO. But it turns out my systemC model runs little slower than the pure C code. And I found out the reason are inter-module communication overhead and scheduling overhead. It requries data transfer between modules and threads management. However, even it is slower, it is still acceptable because it is easier to parallelize the image processing part and simulate the hardware-like behavior.